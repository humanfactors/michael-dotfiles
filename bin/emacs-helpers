#!/usr/bin/env bash
# Checks if there's a frame open

# If you want to execute elisp, pass in -e whatever.
# You may also want to stop the output from returning to the terminal, like
# ec -e "(message \"Hello\")" > /dev/null

# emacsclient options for reference
# -a "" starts emacs daemon and reattaches
# -c creates a new frame
# -n returns control back to the terminal
# -e eval the script

# Number of current visible frames,
# Emacs daemon always has a visible frame called F1
visible_frames() {
    emacsclient -a "" -e '(length (visible-frame-list))'
}

change_focus() {
    emacsclient -n -e "(select-frame-set-input-focus (selected-frame))" > /dev/null
}


em() {
    # try switching to the frame incase it is just minimized
    # will start a server if not running
    test "$(visible_frames)" -eq "1" && change_focus
    if [ "$(visible_frames)" -lt "3" ]; then # need to create a frame
        emacsclient -a '' --no-wait -n -c "$@" && change_focus
    else # there is already a visible frame besides the daemon, so
        change_focus
        # -n $@ errors if there are no args
        test  "$#" -ne "0" && emacsclient -n "$@"
    fi
}


# This script is called "et" for "emacs terminal"
et() {
    TERM=xterm-256color
    exec emacsclient -a "" -t "$@"
}


emqt() {
    TERM=xterm-256color
    emacs -q -nw $1
}
